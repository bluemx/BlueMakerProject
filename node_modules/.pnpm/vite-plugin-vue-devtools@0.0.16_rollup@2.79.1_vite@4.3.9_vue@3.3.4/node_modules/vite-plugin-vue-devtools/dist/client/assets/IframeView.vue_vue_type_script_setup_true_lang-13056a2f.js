import { v as defineComponent, af as useColorMode, Z as ref, $ as computed, ag as reactive, ah as useElementBounding, a5 as onMounted, n as nextTick, ai as watchEffect, aj as onUnmounted, o as openBlock, e as createElementBlock } from './index-d1c9f78d.js';

const iframeCacheMap = /* @__PURE__ */ new Map();
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IframeView",
  props: {
    src: null
  },
  setup(__props) {
    const props = __props;
    const colorMode = useColorMode();
    const anchor = ref();
    const key = computed(() => props.src);
    const iframeEl = ref();
    const box = reactive(useElementBounding(anchor));
    onMounted(() => {
      if (iframeCacheMap.get(key.value)) {
        iframeEl.value = iframeCacheMap.get(key.value);
        iframeEl.value.style.visibility = "visible";
      } else {
        iframeEl.value = document.createElement("iframe");
        iframeCacheMap.set(key.value, iframeEl.value);
        iframeEl.value.src = props.src;
        try {
          iframeEl.value.style.opacity = "0.01";
          iframeEl.value.onload = () => {
            syncColorMode();
            iframeEl.value.style.opacity = "1";
          };
        } catch (e) {
          iframeEl.value.style.opacity = "1";
        }
        document.body.appendChild(iframeEl.value);
        nextTick(updateIframeBox);
      }
      setTimeout(syncColorMode, 100);
    });
    watchEffect(updateIframeBox);
    watchEffect(syncColorMode);
    onUnmounted(() => {
      if (iframeEl.value)
        iframeEl.value.style.visibility = "hidden";
    });
    function syncColorMode() {
      if (!iframeEl.value || !iframeEl.value.contentWindow)
        return;
      try {
        const html = iframeEl.value.contentWindow.document.querySelector("html");
        html?.classList.toggle("dark", colorMode.value === "dark");
        html?.classList.toggle("light", colorMode.value === "dark");
      } catch (e) {
      }
    }
    function updateIframeBox() {
      if (!iframeEl.value)
        return;
      Object.assign(iframeEl.value.style, {
        position: "fixed",
        left: `${box.left}px`,
        top: `${box.top}px`,
        width: `${box.width}px`,
        height: `${box.height}px`,
        outline: "none"
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "anchor",
        ref: anchor,
        "h-full": "",
        "w-full": ""
      }, null, 512);
    };
  }
});

/* Injected with object hook! */

export { _sfc_main as _ };
