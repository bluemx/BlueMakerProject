export type ToastType = 'success' | 'info' | 'warning' | 'error';
export interface ToastEvent {
    show?: boolean;
    id: number;
    content: string;
    type: ToastType;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    show?: false | undefined;
    position?: "top" | "bottom" | undefined;
    align?: "center" | "left" | "right" | undefined;
    timeout?: number | undefined;
    queue?: boolean | undefined;
    zIndex?: number | undefined;
    closeable?: boolean | undefined;
}>, {
    position: string;
    align: string;
    timeout: number;
    queue: boolean;
    zIndex: number;
    closeable: boolean;
}>, {
    show: (type: ToastType, content: string) => void;
    success: (content: string) => void;
    info: (content: string) => void;
    warning: (content: string) => void;
    error: (content: string) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    show?: false | undefined;
    position?: "top" | "bottom" | undefined;
    align?: "center" | "left" | "right" | undefined;
    timeout?: number | undefined;
    queue?: boolean | undefined;
    zIndex?: number | undefined;
    closeable?: boolean | undefined;
}>, {
    position: string;
    align: string;
    timeout: number;
    queue: boolean;
    zIndex: number;
    closeable: boolean;
}>>>, {
    closeable: boolean;
    align: 'left' | 'center' | 'right';
    timeout: number;
    position: 'top' | 'bottom';
    zIndex: number;
    queue: boolean;
}>, {
    default?(_: {
        type: ToastType;
        content: string;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
