export interface TreeOption {
    label: string;
    value: any;
    hidden?: boolean;
    disabled?: boolean;
    children?: TreeOption[];
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    modelValue?: any;
    options?: TreeOption[] | undefined;
    cascade?: boolean | undefined;
    /**
     * auto: when all children are checked, parent will be checked
     *
     * check: when child is checked, parent will be checked
     *
     * uncheck: checking child will not affect parent
     **/
    associateParent?: "auto" | "check" | "uncheck" | undefined;
    selectable?: boolean | undefined;
    defaultExpandedKeys?: any[] | undefined;
    level?: number | undefined;
}>, {
    modelValue: null;
    selectable: boolean;
    cascade: boolean;
    associateParent: string;
    options: () => never[];
    defaultExpandedKeys: () => never[];
    level: number;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    modelValue?: any;
    options?: TreeOption[] | undefined;
    cascade?: boolean | undefined;
    /**
     * auto: when all children are checked, parent will be checked
     *
     * check: when child is checked, parent will be checked
     *
     * uncheck: checking child will not affect parent
     **/
    associateParent?: "auto" | "check" | "uncheck" | undefined;
    selectable?: boolean | undefined;
    defaultExpandedKeys?: any[] | undefined;
    level?: number | undefined;
}>, {
    modelValue: null;
    selectable: boolean;
    cascade: boolean;
    associateParent: string;
    options: () => never[];
    defaultExpandedKeys: () => never[];
    level: number;
}>>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    options: Array<TreeOption>;
    modelValue: any;
    associateParent: 'auto' | 'check' | 'uncheck';
    cascade: boolean;
    selectable: boolean;
    defaultExpandedKeys: Array<any>;
    level: number;
}>, {
    option?(_: {
        item: TreeOption;
        level: number;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
